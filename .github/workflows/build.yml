name: Build BHTikTok++ IPA and Upload to Appdb

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        description: "URL to the decrypted TikTok IPA file"
        default: "https://www.dropbox.com/scl/fi/nqk5nnbdbovugqex1lep8/com.ss.iphone.ugc.Ame_40.7.0_und3fined.ipa?rlkey=jbwoeds3nf1dk5i1mdz8f8ce9&st=8kn8hhuw&dl=1"
        required: true
        type: string

      display_name:
        description: "App Name (Optional)"
        default: "TikTok"
        required: true
        type: string

      bundle_id:
        description: "BundleID (Optional)"
        default: "com.zhiliaoapp.musically"
        required: true
        type: string

      upload_to_appdb:
        description: "Upload and Edit Metadata on appdb"
        default: true
        required: false
        type: boolean

      cleanup_old_versions:
        description: "Delete older versions of this app from appdb"
        default: true
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build BHTikTok++
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Main
        uses: actions/checkout@v4
        with:
          path: main
          submodules: recursive

      - name: Hide sensitive inputs
        uses: levibostian/action-hide-sensitive-inputs@v1
        with:
          exclude_inputs: display_name,bundle_id

      - name: Download and validate IPA
        run: |
          wget "${{ inputs.ipa_url }}" --no-verbose -O ${{ github.workspace }}/tiktok.ipa
          file_type=$(file --mime-type -b ${{ github.workspace }}/tiktok.ipa)
          if [[ "$file_type" != "application/x-ios-app" && "$file_type" != "application/zip" ]]; then
            echo "::error::Validation failed: The downloaded file is not a valid IPA. Detected type: $file_type."
            exit 1
          fi

      - name: Install Dependencies
        run: brew install make ldid jq

      - name: Set PATH environment variable
        run: echo "$(brew --prefix make)/libexec/gnubin" >> $GITHUB_PATH

      - name: Install cyan
        run: pipx install --force https://github.com/asdfzxcvbn/pyzule-rw/archive/main.zip

      - name: Download BHTikTok++ and Get Versions
        id: versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Download latest BHTikTok++ release
          api_url="https://api.github.com/repos/raulsaeed/BHTikTokPlusPlus/releases/latest"
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$api_url")
          bhtiktok_tag=$(echo "$response" | jq -r '.tag_name')
          # Select only the arm64 deb file to avoid errors
          deb_url=$(echo "$response" | jq -r '.assets[] | select(.name | endswith("arm64.deb")) | .browser_download_url')

          if [[ "$deb_url" == "null" || -z "$deb_url" ]]; then
            echo "::error::Failed to get tweak URL from Github API"
            exit 1
          fi
          
          # Extract TikTok version from IPA URL
          tiktok_version=$(echo "${{ inputs.ipa_url }}" | grep -o -E '[0-9]+(\.[0-9]+)+' | head -n 1)

          echo "BHTIKTOK_TAG=${bhtiktok_tag}" >> "$GITHUB_OUTPUT"
          echo "TIKTOK_VERSION=${tiktok_version}" >> "$GITHUB_OUTPUT"
          
          echo "Downloading: $deb_url"
          wget "$deb_url" --no-verbose -O ${{ github.workspace }}/bhtiktok.deb

      - name: Inject tweaks into IPA
        id: package_info
        run: |
          FINAL_IPA_NAME="BHTikTok++_${{ steps.versions.outputs.BHTIKTOK_TAG }}_TikTok_${{ steps.versions.outputs.TIKTOK_VERSION }}.ipa"
          cyan -i tiktok.ipa -o "${FINAL_IPA_NAME}" -uwef bhtiktok.deb -n "${{ inputs.display_name }}" -b "${{ inputs.bundle_id }}" -s
          echo "package_name=${FINAL_IPA_NAME}" >> "$GITHUB_OUTPUT"
          echo "job_id=$(echo -n "${{ github.run_id }}-${{ github.run_attempt }}" | shasum -a 1 | awk '{print $1}')" >> "$GITHUB_OUTPUT"

      - name: Strip embedded Swift dylibs
        run: |
          unzip -q "${{ steps.package_info.outputs.package_name }}" -d tmp_payload
          find tmp_payload/Payload/*.app/ -name "libswift*.dylib" -print -delete
          cd tmp_payload
          zip -qr ../clean_ipa.ipa Payload
          cd ..
          mv clean_ipa.ipa "${{ steps.package_info.outputs.package_name }}"

      - name: Upload and Edit on appdb
        if: ${{ inputs.upload_to_appdb }}
        id: upload_step
        env:
          APPDB_LINK_TOKEN: ${{ secrets.APPDB_LINK_TOKEN }}
          PACKAGE_PATH: ${{ github.workspace }}/${{ steps.package_info.outputs.package_name }}
          JOB_ID: ${{ steps.package_info.outputs.job_id }}
          BHTIKTOK_TAG: ${{ steps.versions.outputs.BHTIKTOK_TAG }}
          TIKTOK_VERSION: ${{ steps.versions.outputs.TIKTOK_VERSION }}
        run: |
          echo "Step 1: Uploading IPA to appdb..."
          curl -sS -X POST https://api.dbservices.to/v1.7/add_ipa/ \
               -F "lt=${APPDB_LINK_TOKEN}" \
               -F "job_id=${JOB_ID}" \
               -F "ipa=@${PACKAGE_PATH}" \
               --fail

          echo "Step 2: Waiting for IPA processing..."
          for i in {1..20}; do
            sleep 15
            STATUS_RESPONSE=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipa_analyze_jobs/ -F "lt=${APPDB_LINK_TOKEN}" -F "ids[]=${JOB_ID}")
            IS_FINISHED=$(echo "$STATUS_RESPONSE" | jq -r '.data[0].is_finished')
            if [ "$IS_FINISHED" = "1" ]; then
              echo "Processing finished!"
              break
            fi
            echo "Still processing... Attempt $i of 20."
            if [ "$i" = "20" ]; then
              echo "Error: Timeout waiting for IPA processing."
              exit 1
            fi
          done
          
          echo "Step 3: Fetching the new IPA ID..."
          IPA_ID=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipas/ -F "lt=${APPDB_LINK_TOKEN}" | jq '(.data | sort_by(.id) | reverse)[0].id')
          if [ -z "$IPA_ID" ] || [ "$IPA_ID" = "null" ]; then
            echo "Error: Could not fetch new IPA ID."
            exit 1
          fi
          echo "Found newest IPA ID: ${IPA_ID}"
          echo "ipa_id=${IPA_ID}" >> "$GITHUB_OUTPUT"

          echo "Step 4: Editing IPA metadata..."
          APP_NAME="TikTok v${TIKTOK_VERSION} + BHTikTok++ ${BHTIKTOK_TAG}"
          curl -sS -X POST https://api.dbservices.to/v1.7/edit_ipa_metadata/ \
            -F "lt=${APPDB_LINK_TOKEN}" \
            -F "id=${IPA_ID}" \
            -F "name=${APP_NAME}" \
            -F "use_default_tos=1" \
            -F "use_default_privacy_policy=1" \
            -F "use_default_license=1" \
            -F "is_18plus=0" \
            -F "description=Enhanced TikTok with BHTikTok++ injected" \
            -F "whatsnew=The latest version contains bug fixes and performance improvements." \
            -F "is_public=1" \
            -F "source_name=Johnny's library" \
            -F "developer_name=TikTok" \
            -F "genre_name=Enhanced Apps" \
            -F "min_ios_version=15.0" \
            -F "min_ipados_version=15.0" \
            --fail
          echo "Metadata updated successfully!"

      - name: Cleanup Old Versions on appdb
        if: ${{ inputs.upload_to_appdb && inputs.cleanup_old_versions }}
        env:
          APPDB_LINK_TOKEN: ${{ secrets.APPDB_LINK_TOKEN }}
          NEWEST_IPA_ID: ${{ steps.upload_step.outputs.ipa_id }}
        run: |
          echo "Step 5: Cleaning up old IPA versions, keeping ID ${NEWEST_IPA_ID}..."
          IPAS_RESPONSE=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipas/ -F "lt=${APPDB_LINK_TOKEN}")
          OLD_IPA_IDS=$(echo "$IPAS_RESPONSE" | jq -r --argjson newest_id "$NEWEST_IPA_ID" '(.data | map(select(.name | contains("TikTok"))) | map(select(.id != $newest_id)) | .[].id)')
          if [ -z "$OLD_IPA_IDS" ]; then
            echo "No old TikTok versions found to delete."
          else
            echo "Found old IPAs to delete with IDs: $OLD_IPA_IDS"
            for OLD_ID in $OLD_IPA_IDS; do
              echo "Deleting IPA with ID: $OLD_ID..."
              curl -sS -X POST https://api.dbservices.to/v1.7/delete_ipa/ \
                   -F "lt=${APPDB_LINK_TOKEN}" \
                   -F "id=${OLD_ID}" \
                   --fail
              echo "Deleted IPA with ID: $OLD_ID"
              sleep 2
            done
          fi
          echo "Cleanup finished."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: bhtiktok-${{ steps.versions.outputs.BHTIKTOK_TAG }}
          name: BHTikTok++ ${{ steps.versions.outputs.BHTIKTOK_TAG }}
          files: ${{ steps.package_info.outputs.package_name }}
          draft: true
